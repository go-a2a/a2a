// Copyright 2025 The Go A2A Authors
// SPDX-License-Identifier: Apache-2.0

package a2a

import (
	"time"
)

// AgentAuthentication represents the authentication schemes and credentials required by an agent.
type AgentAuthentication struct {
	// Schemes is the list of authentication schemes supported by the agent.
	Schemes []string `json:"schemes"`
	// Credentials is an optional credential string.
	Credentials *string `json:"credentials,omitempty"`
}

// AgentCapabilities represents the capabilities supported by an agent.
type AgentCapabilities struct {
	// Streaming indicates if the agent supports task streaming.
	Streaming bool `json:"streaming,omitempty"`
	// PushNotifications indicates if the agent supports push notifications.
	PushNotifications bool `json:"pushNotifications,omitempty"`
	// StateTransitionHistory indicates if the agent supports state transition history.
	StateTransitionHistory bool `json:"stateTransitionHistory,omitempty"`
}

// AgentCard provides metadata about an agent.
type AgentCard struct {
	// Name is the human-readable name of the agent.
	Name string `json:"name"`
	// Description is an optional description of the agent.
	Description *string `json:"description,omitempty"`
	// URL is the base URL endpoint for the agent's A2A service.
	URL string `json:"url"`
	// Provider contains optional details about the organization providing the agent.
	Provider *AgentProvider `json:"provider,omitempty"`
	// Version is the agent/API version.
	Version string `json:"version"`
	// DocumentationURL is an optional link to documentation.
	DocumentationURL *string `json:"documentationUrl,omitempty"`
	// Capabilities defines the features supported by this agent.
	Capabilities AgentCapabilities `json:"capabilities"`
	// Authentication defines the authentication schemes and credentials needed.
	Authentication *AgentAuthentication `json:"authentication,omitempty"`
	// DefaultInputModes is the list of default supported input types.
	DefaultInputModes []string `json:"defaultInputModes,omitempty"`
	// DefaultOutputModes is the list of default supported output types.
	DefaultOutputModes []string `json:"defaultOutputModes,omitempty"`
	// Skills is the list of specific capabilities provided by the agent.
	Skills []AgentSkill `json:"skills"`
}

// AgentProvider represents information about the provider of an agent.
type AgentProvider struct {
	// Organization is the name of the organization providing the agent.
	Organization string `json:"organization"`
	// URL is an optional URL for the organization.
	URL *string `json:"url,omitempty"`
}

// AgentSkill represents a specific capability provided by an agent.
type AgentSkill struct {
	// ID is the unique identifier for the skill.
	ID string `json:"id"`
	// Name is the human-readable name of the skill.
	Name string `json:"name"`
	// Description is an optional description of the skill.
	Description *string `json:"description,omitempty"`
	// Tags is an optional list of keywords associated with the skill.
	Tags []string `json:"tags,omitempty"`
	// Examples is an optional list of usage examples for the skill.
	Examples []string `json:"examples,omitempty"`
	// InputModes optionally overrides the default input modes for this skill.
	InputModes []string `json:"inputModes,omitempty"`
	// OutputModes optionally overrides the default output modes for this skill.
	OutputModes []string `json:"outputModes,omitempty"`
}

// Artifact represents output generated by a task.
type Artifact struct {
	// Name is an optional name for the artifact.
	Name *string `json:"name,omitempty"`
	// Description is an optional description of the artifact.
	Description *string `json:"description,omitempty"`
	// Parts contains the content parts of the artifact.
	Parts []Part `json:"parts"`
	// Index is the order index, useful for streaming/updates.
	Index int `json:"index,omitempty"`
	// Append indicates if content should append to an artifact at the same index (for streaming).
	Append *bool `json:"append,omitempty"`
	// LastChunk indicates the final chunk for this artifact (for streaming).
	LastChunk *bool `json:"lastChunk,omitempty"`
	// Metadata contains optional additional artifact metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// AuthenticationInfo represents authentication information.
type AuthenticationInfo struct {
	// Schemes is the list of authentication schemes.
	Schemes []string `json:"schemes"`
	// Credentials is an optional credential string.
	Credentials *string `json:"credentials,omitempty"`
}

// FileContent represents the content of a file, either as base64 encoded bytes or a URI.
type FileContent struct {
	// Name is an optional filename.
	Name *string `json:"name,omitempty"`
	// MimeType is an optional MIME type.
	MimeType *string `json:"mimeType,omitempty"`
	// Bytes is base64 encoded file content. Mutually exclusive with URI.
	Bytes *string `json:"bytes,omitempty"`
	// URI is a URI pointing to the file content. Mutually exclusive with Bytes.
	URI *string `json:"uri,omitempty"`
}

// Message represents a communication unit between user and agent.
type Message struct {
	// Role is the sender role ("user" or "agent").
	Role string `json:"role"`
	// Parts contains the content parts (text, file, data).
	Parts []Part `json:"parts"`
	// Metadata contains optional message-specific metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// Part represents a piece of content within a Message or Artifact.
// It's implemented as a Go interface with concrete implementations for each type of part.
type Part interface {
	GetType() string
	GetMetadata() map[string]any
}

// TextPart represents a text part.
type TextPart struct {
	// Type is always "text".
	Type string `json:"type"`
	// Text is the textual content.
	Text string `json:"text"`
	// Metadata contains optional part-specific metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// GetType returns the type of the part.
func (p TextPart) GetType() string {
	return p.Type
}

// GetMetadata returns the metadata of the part.
func (p TextPart) GetMetadata() map[string]any {
	return p.Metadata
}

// FilePart represents a file part.
type FilePart struct {
	// Type is always "file".
	Type string `json:"type"`
	// File contains the file content details.
	File FileContent `json:"file"`
	// Metadata contains optional part-specific metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// GetType returns the type of the part.
func (p FilePart) GetType() string {
	return p.Type
}

// GetMetadata returns the metadata of the part.
func (p FilePart) GetMetadata() map[string]any {
	return p.Metadata
}

// DataPart represents structured data part.
type DataPart struct {
	// Type is always "data".
	Type string `json:"type"`
	// Data contains the structured JSON data.
	Data map[string]any `json:"data"`
	// Metadata contains optional part-specific metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// GetType returns the type of the part.
func (p DataPart) GetType() string {
	return p.Type
}

// GetMetadata returns the metadata of the part.
func (p DataPart) GetMetadata() map[string]any {
	return p.Metadata
}

// PushNotificationConfig represents configuration for push notifications.
type PushNotificationConfig struct {
	// URL is the endpoint URL for the agent to POST notifications to.
	URL string `json:"url"`
	// Token is an optional token for the agent to include.
	Token *string `json:"token,omitempty"`
	// Authentication contains auth details the agent needs to call the URL.
	Authentication *AuthenticationInfo `json:"authentication,omitempty"`
}

// Task represents a unit of work processed by an agent.
type Task struct {
	// ID is the unique task identifier.
	ID string `json:"id"`
	// SessionID optionally groups related tasks.
	SessionID *string `json:"sessionId,omitempty"`
	// Status contains the current state and associated message.
	Status TaskStatus `json:"status"`
	// Artifacts contains outputs generated by the task.
	Artifacts []Artifact `json:"artifacts,omitempty"`
	// Metadata contains additional task metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// TaskIdParams represents parameters for methods that require a task ID.
type TaskIdParams struct {
	// ID is the unique task identifier.
	ID string `json:"id"`
	// Metadata contains optional additional metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// TaskPushNotificationConfig associates a PushNotificationConfig with a task ID.
type TaskPushNotificationConfig struct {
	// ID is the unique task identifier.
	ID string `json:"id"`
	// PushNotificationConfig contains the push notification configuration.
	PushNotificationConfig PushNotificationConfig `json:"pushNotificationConfig"`
}

// TaskQueryParams represents parameters for querying a task.
type TaskQueryParams struct {
	// ID is the unique task identifier.
	ID string `json:"id"`
	// HistoryLength optionally limits the number of historical messages to include.
	HistoryLength *int `json:"historyLength,omitempty"`
	// Metadata contains optional additional metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// TaskSendParams represents parameters for sending a task.
type TaskSendParams struct {
	// ID is the unique task identifier.
	ID string `json:"id"`
	// SessionID optionally groups related tasks.
	SessionID *string `json:"sessionId,omitempty"`
	// Message contains the content to send.
	Message Message `json:"message"`
	// PushNotification optionally configures push notifications for this task.
	PushNotification *PushNotificationConfig `json:"pushNotification,omitempty"`
	// HistoryLength optionally limits the number of historical messages to include.
	HistoryLength *int `json:"historyLength,omitempty"`
	// Metadata contains optional additional metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// TaskState represents the lifecycle state of a task.
type TaskState string

// Task state constants.
const (
	TaskStateSubmitted     TaskState = "submitted"
	TaskStateWorking       TaskState = "working"
	TaskStateInputRequired TaskState = "input-required"
	TaskStateCompleted     TaskState = "completed"
	TaskStateCanceled      TaskState = "canceled"
	TaskStateFailed        TaskState = "failed"
	TaskStateUnknown       TaskState = "unknown"
)

// TaskStatus represents the current status of a task.
type TaskStatus struct {
	// State is the current lifecycle state.
	State TaskState `json:"state"`
	// Message is optionally associated with this status.
	Message *Message `json:"message,omitempty"`
	// Timestamp is the ISO 8601 timestamp of the status update.
	Timestamp time.Time `json:"timestamp"`
}

// TaskStatusUpdateEvent signals a change in task status.
type TaskStatusUpdateEvent struct {
	// ID is the task identifier.
	ID string `json:"id"`
	// Status is the new status object.
	Status TaskStatus `json:"status"`
	// Final indicates if this is the terminal update for the task.
	Final bool `json:"final,omitempty"`
	// Metadata contains optional event metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}

// TaskArtifactUpdateEvent signals a new or updated artifact.
type TaskArtifactUpdateEvent struct {
	// ID is the task identifier.
	ID string `json:"id"`
	// Artifact contains the artifact data.
	Artifact Artifact `json:"artifact"`
	// Final indicates if this is the final artifact for the task.
	Final bool `json:"final,omitempty"`
	// Metadata contains optional event metadata.
	Metadata map[string]any `json:"metadata,omitempty"`
}
